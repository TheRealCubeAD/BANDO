[gd_scene load_steps=7 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://scripts/fire.gd" type="Script" id=2]
[ext_resource path="res://torch_holder0001.png" type="Texture" id=3]
[ext_resource path="res://light_map.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;





uniform vec4 transparent : hint_color;

uniform vec4 inner : hint_color;

uniform vec4 outer : hint_color;



uniform float inner_threshold = 0.4;

uniform float outer_threshold = 0.15;

uniform float soft_edge = 0.04;



uniform vec2 center = vec2(0.5, 0.5);



uniform int OCTAVES = 6;



float rand(vec2 coord){

	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);

}



float noise(vec2 coord){
	

	vec2 i = floor(coord);

	vec2 f = fract(coord);



	// 4 corners of a rectangle surrounding our point

	float a = rand(i);

	float b = rand(i + vec2(1.0, 0.0));

	float c = rand(i + vec2(0.0, 1.0));

	float d = rand(i + vec2(1.0, 1.0));



	vec2 cubic = f * f * (3.0 - 2.0 * f);



	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;

}



float fbm(vec2 coord){
	
	coord = vec2(1,1);

	float value = 0.0;

	float scale = 0.5;



	for(int i = 0; i < OCTAVES; i++){

		value += noise(coord) * scale;

		coord -= 2.0;

		scale *= 0.5;

	}

	return value;

}



float overlay(float base, float top) {

	if (base < 0.5) {

		return 2.0 * base * top;

	} else {

		return 1.0 - 2.0 * (1.0 - base) * (1.0 - top);

	}

}



float egg_shape(vec2 coord, float radius){

	vec2 diff = abs(coord - center);



	if (coord.y < center.y){

		diff.y /= 1.0;

	} else {

		diff.y *= 1.0;

	}



	float dist = sqrt(diff.x * diff.x + diff.y * diff.y) / radius;

	float value = sqrt(1.0 - dist * dist);

	return clamp(value, 0.0, 1.0);

}



void fragment() {

	vec2 coord = UV * 8.0;

	vec2 fbmcoord = coord / 6.0;



	float egg_s = egg_shape(UV, 0.4);

	egg_s += egg_shape(UV, 0.2) / 2.0;



	float noise1 = noise(coord + 2.0 * vec2(cos(TIME * 0.01), -10.0 * cos(TIME * 1.0)));

	float noise2 = noise(coord + 2.0 * vec2(cos(TIME * 0.01), 10.0 * sin(TIME * 1.0)));

	float combined_noise = (noise1 + noise2) / 2.0;



	float fbm_noise = fbm(fbmcoord + vec2(0.0, TIME * 3.0));

	fbm_noise = overlay(fbm_noise, UV.y);



	float everything_combined = combined_noise * fbm_noise * egg_s;



	if (everything_combined < outer_threshold){

		COLOR = transparent;

	} else if (everything_combined < outer_threshold + soft_edge){

		COLOR = mix(transparent, outer, (everything_combined - outer_threshold) / soft_edge);

	} else if (everything_combined < inner_threshold){

		COLOR = outer;

	} else if (everything_combined < inner_threshold + soft_edge){

		COLOR = mix(outer, inner, (everything_combined - inner_threshold) / soft_edge);

	} else {

		COLOR = inner;

	}



	//COLOR = vec4(vec3(everything_combined), 1.0);

}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/transparent = Color( 0, 0, 0, 0 )
shader_param/inner = Color( 0.976471, 0.756863, 0.541176, 1 )
shader_param/outer = Color( 0.945098, 0.596078, 0.152941, 1 )
shader_param/inner_threshold = 0.4
shader_param/outer_threshold = 0.15
shader_param/soft_edge = 0.04
shader_param/center = Vector2( 0.5, 0.443 )
shader_param/OCTAVES = 8

[node name="Fire" type="Node2D"]
script = ExtResource( 2 )

[node name="Torch_holder" type="Sprite" parent="."]
position = Vector2( -2.20065, 0 )
texture = ExtResource( 3 )

[node name="Flame" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( -85.1459, -3.50464 )
scale = Vector2( 1.29127, 1.46491 )
texture = ExtResource( 1 )

[node name="Light" type="Light2D" parent="."]
position = Vector2( -84.59, 0 )
texture = ExtResource( 4 )
texture_scale = 1.5
color = Color( 0.968627, 0.486275, 0.164706, 0.27451 )
energy = 2.31
mode = 2
shadow_enabled = true
shadow_color = Color( 1, 0.470588, 0, 0 )
shadow_buffer_size = 4096
shadow_gradient_length = 50.0
shadow_filter = 5
shadow_filter_smooth = 15.5
__meta__ = {
"_editor_description_": ""
}
